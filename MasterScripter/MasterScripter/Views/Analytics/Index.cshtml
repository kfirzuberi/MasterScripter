@using MasterScripter.DAL.Models
@model MasterScripter.Models.AnalyticsViewModel

@{
    ViewBag.Title = "Index";
}
<script type="text/javascript" async=false defer=false  src="https://d3js.org/d3.v5.min.js"></script>

<script type="text/javascript" async=false defer=false  src="~/Scripts/c3.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.6.7/c3.min.css" />

@functions{

    public string GetIconText(Status status)
    {
        switch (status)
        {
            case Status.Running:
                return "directions_run";
            case Status.Succeeded:
                return "done";
            case Status.Failed:
                return "error_outline";
            case Status.Waiting:
            default:
                return "access_time";
        }
    }

    public string GetCssClass(Status status, string prefix = "")
    {
        switch (status)
        {
            case Status.Running:
                return prefix + "primary";
            case Status.Succeeded:
                return prefix + "success";
            case Status.Failed:
                return prefix + "danger";
            case Status.Waiting:
            default:
                return prefix + "secondary";
        }
    }

}

<div class="container-fluid">
    <div class="row" style="margin-bottom: 0.5rem;" id="analytics-view-numbers">
        <div class="container-fluid card-columns" style="column-count: 2">
            @foreach (var s in Enum.GetValues(typeof(Status)).Cast<Status>())
            {
                <div class="col">
                    <div class="card text-center">
                        <div class="card-body text-dark">
                            <h6 class="">@s Executions</h6>
                            <i class="material-icons md-48 @GetCssClass(s, "text-")">@GetIconText(s)</i>
                            <p class="card-text">
                                <h3>@(Model.TotalStatuses.ContainsKey(s) ? Model.TotalStatuses[s] : 0)</h3>
                            </p>
                        </div>
                    </div>
                </div>

            } 
        </div>
    

    </div>
    
    <div class="row" style="margin-bottom: 0.5rem;">
      
        <div class="col-md-4">
            <div class="card text-center card-block">
                <div class="card-body">
                    <h6 class="">Active machines</h6>
                    <div id="chartMachinesState"></div>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card text-center">
                <div class="card-body">
                    <h6 class="">Executions count per day</h6>
                    <div id="charTotalExecutionsPerDay"></div>
                </div>
            </div>
        </div>
        
    </div>
    <div class="row" style="margin-bottom: 0.5rem;">
        <div class="col-md-6">
            <div class="card text-center">
                <div class="card-body">
                    <h6 class="">Statuses of executions</h6>
                    <div id="chartTotalStatuses"></div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card text-center">
                <div class="card-body">
                    <h6 class="">Reasons of executions</h6>
                    <div id="chartTotalReasons"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="margin-bottom: 0.5rem;">
        <div class="col-md-6">
            <div class="card text-center">
                <div class="card-body">
                    <h6 class="">Executions on machines</h6>
                    <div id="chartTotalMachines"></div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card text-center">
                <div class="card-body">
                    <h6 class="">Countries per machines</h6>
                    <div id="chartTotalCountries"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    setTimeout(() => {
        var totalStatuses = @Html.Raw(Json.Encode(Model.TotalStatuses.ToList().ConvertAll(x=> new KeyValuePair<string, int>(x.Key.ToString(),x.Value) )));
        var totalExecutionsPerDay = @Html.Raw(Json.Encode(Model.TotalExecutionsPerDay.ToList().ConvertAll(x=> new KeyValuePair<DateTime, int>(x.Key,x.Value) )));
        var totalCountries = @Html.Raw(Json.Encode(Model.TotalCountries.ToList().ConvertAll(x=> new KeyValuePair<string, int>(x.Key.Name,x.Value) )));
        var totalReasons = @Html.Raw(Json.Encode(Model.TotalReasons.ToList().ConvertAll(x=> new KeyValuePair<string, int>(x.Key.ReasonName,x.Value) )));
        var totalMachines = @Html.Raw(Json.Encode(Model.TotalMachines.ToList().ConvertAll(x=> 
                          new KeyValuePair<string, int>(x.Key.IP +"("+x.Key.VLan+")",x.Value) )));

        var machinesState = @Html.Raw(Json.Encode(Model.MachinesState));

        var chartTotalStatuses = c3.generate({
                data: {
                    columns:totalStatuses.map(x=> [x["Key"], x["Value"]]),
                    type: 'pie'
                },
                bindto: '#chartTotalStatuses'
        });

        var chartTotalCountries = c3.generate({
                data: {
                    columns:totalCountries.map(x=> [x["Key"], x["Value"]]),
                    type: 'pie',
                  
                },
                bindto: '#chartTotalCountries'
        });

        var chartTotalReasons = c3.generate({
                data: {
                    columns:totalReasons.map(x=> [x["Key"], x["Value"]]),
                    type: 'pie',
                  
                },
                bindto: '#chartTotalReasons'
            });
        var charTotalExecutionsPerDay = c3.generate({
            data: {
                x: 'date',
                type : 'spline',
                columns: [
                    ['date', ...totalExecutionsPerDay.map(x=> parseInt(x.Key.replace('/Date(','').replace(')/','')))],
                    ['count', ...totalExecutionsPerDay.map(x=>  x["Value"])]
                ]
            },
            axis: {
                x: {
                    type: 'timeseries'
                }
            },
            bindto: '#charTotalExecutionsPerDay'
                
        });

        var chartTotalMachines = c3.generate({
            bindto: '#chartTotalMachines',
                data: {
                    columns:totalMachines.map(x=> [x["Key"], x["Value"]]),
                    type: 'bar'
                }
        });

        var chartMachinesState = c3.generate({
            bindto: '#chartMachinesState',
                data: {
                    columns: [['active machines', (machinesState["Item2"]*100) / machinesState["Item1"]] ],
                    type: 'gauge'
                }
            });
        },

        1000);
 
</script>