@using System.Linq.Expressions
@using MasterScripter.DAL.Models
@model IEnumerable<MasterScripter.DAL.Models.Execution>

@{
    ViewBag.Title = "Index";
}

@functions{

    public string GetIconText(Status status)
    {
        switch (status)
        {
            case Status.Running:
                return "directions_run";
            case Status.Succeeded:
                return "done";
            case Status.Failed:
                return "error_outline";
            case Status.Waiting:
            default:
                return "access_time";
        }
    }

    public string GetCssClass(Status status, string prefix = "")
    {
        switch (status)
        {
            case Status.Running:
                return prefix + "primary";
            case Status.Succeeded:
                return prefix + "success";
            case Status.Failed:
                return prefix + "danger";
            case Status.Waiting:
            default:
                return prefix + "secondary";
        }
    }

}

<h2>Index</h2>


<div class="row">
    <div class="row">
        <div class="col">
            <div class="btn-group statuses" role="group" aria-label="status">
                <button type="button" aria-pressed="false" class="btn btn-outline-primary active">Running</button>
                <button type="button" aria-pressed="false" class="btn btn-outline-success active">Succeeded</button>
                <button type="button" aria-pressed="false" class="btn btn-outline-secondary active">Waiting</button>
                <button type="button" aria-pressed="false" class="btn btn-outline-danger active">Failed</button>
            </div> 
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="btn-group order-time" role="group" aria-label="Basic example">
                <button type="button" aria-pressed="false" class="btn btn-info active">Creation Date</button>
                <button type="button" aria-pressed="false" class="btn btn-info">Start Time</button>
                <button type="button" aria-pressed="false" class="btn btn-info">End Time</button>
                <button type="button" aria-pressed="false" class="btn btn-info">Schedule Time</button>
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <div class="page-header" id="executionsTimeline">
            <h1>Timeline</h1>
        </div>
        <!-- <ul class="timeline">
        @foreach (var item in Model)
        {
            <li class="timeline-item">
                <div class="timeline-badge @(GetCssClass(item.Status, "bg-"))">
                    <i class="material-icons">@(GetIconText(item.Status))</i>
                </div>

                <div class="timeline-panel card @(GetCssClass(item.Status, "border-"))">
                    <div class="timeline-heading card-header bg-transparent @(GetCssClass(item.Status, "border-"))">
                        <h4 class="timeline-title">@Html.DisplayFor(modelItem => item.Machine.IP)</h4>
                        <p><small class="text-muted"><i class="glyphicon glyphicon-time"></i> 11 hours ago via Twitter</small>
                        </p>

                    </div>
                    <div class="card-body @(GetCssClass(item.Status, "text-"))">
                        <h5 class="card-title">
                            @Html.DisplayFor(modelItem => item.User.FullName)
                        </h5>
                        <p class="timeline-body card-text">
                            <ul class="list-group list-group-flush">
                                @foreach (var executionsScripts in item.ExecutionsScriptses)
                                {
                                    <li class="list-group-item @(GetCssClass(executionsScripts.Status, "text-"))">
                                        <i class="material-icons">@(GetIconText(executionsScripts.Status))</i>
                                        <small>
                                            @Html.DisplayFor(model => executionsScripts.Script.Name)
                                        </small>
                                    </li>
                                }
                            </ul>
                        </p>
                    </div>
                    <div class="card-footer bg-transparent @(GetCssClass(item.Status, "border-"))">Footer</div>
                </div>
            </li>
        }
        <!--<li class="timeline-item">
            <div class="timeline-badge"><i class="glyphicon glyphicon-check"></i></div>
            <div class="timeline-panel">
                <div class="timeline-heading">
                    <h4 class="timeline-title">Mussum ipsum cacilds 2</h4>
                    <p><small class="text-muted"><i class="glyphicon glyphicon-time"></i> 11 hours ago via Twitter</small></p>
                </div>
                <div class="timeline-body">
                    <p>Mussum ipsum cacilds, vidis litro abertis. Consetis adipiscings elitis. Pra lá , depois divoltis porris, paradis. Paisis, filhis, espiritis santis. Mé faiz elementum girarzis, nisi eros gostis.</p>
                </div>
            </div>
        </li>
        <li class="timeline-item">
            <div class="timeline-badge"><i class="glyphicon glyphicon-check"></i></div>
            <div class="timeline-panel">
                <div class="timeline-heading">
                    <h4 class="timeline-title">Mussum ipsum cacilds 3</h4>
                    <p><small class="text-muted"><i class="glyphicon glyphicon-time"></i> 11 hours ago via Twitter</small></p>
                </div>
                <div class="timeline-body">
                    <p>Mussum ipsum cacilds, vidis litro abertis. Consetis adipiscings elitis. Pra lá , depois divoltis porris, paradis. Paisis, filhis, espiritis santis. Mé faiz elementum girarzis, nisi eros vermeio, in elementis mé pra quem é amistosis quis leo. Manduma pindureta quium dia nois paga. Sapien in monti palavris qui num significa nadis i pareci latim. Interessantiss quisso pudia ce receita de bolis, mais bolis eu num gostis.</p>
                    <p>Mussum ipsum cacilds, vidis litro abertis. Consetis adipiscings elitis. Pra lá , depois divoltis porris, paradis. Paisis, filhis, espiritis santis. Mé faiz elementum girarzis, nisi eros vermeio, in elementis mé pra quem é amistosis quis leo. Manduma pindureta quium dia nois paga. Sapien in monti palavris qui num significa nadis i pareci latim. Interessantiss quisso pudia ce receita de bolis, mais bolis eu num gostis.</p>

                </div>
            </div>
        </li>
        <li class="timeline-item">
            <div class="timeline-badge"><i class="glyphicon glyphicon-check"></i></div>
            <div class="timeline-panel">
                <div class="timeline-heading">
                    <h4 class="timeline-title">Mussum ipsum cacilds 4</h4>
                    <p><small class="text-muted"><i class="glyphicon glyphicon-time"></i> 11 hours ago via Twitter</small></p>
                </div>
                <div class="timeline-body">
                    <p>Mussum ipsum cacilds, vidis litro abertis. Consetis adipiscings elitis. Pra lá , depois divoltis porris, paradis. Paisis, filhis, espiritis santis. Mé faiz elementum girarzis, nisi eros vermeio, in elementis mé pra quem é amistosis quis leo. Manduma pindureta quium dia nois paga. Sapien in monti palavris qui num significa nadis i pareci latim. Interessantiss quisso pudia ce receita de bolis, mais bolis eu num gostis.</p>
                </div>
            </div>
        </li>
        </ul>-->
    </div>
</div>

<script type="text/javascript">
    
    function updateTimeLine(collection, statuses, order) {
        var url = '@Url.Action("GetExecutionTimeline", "Executions")';

        $("#executionsTimeline").load(url, { statuses: statuses, order: order });
    }

    var statuses = $('.statuses button.active').toArray().map(elem => $(elem).text().toLowerCase());
    var order = $('.order-time button.active').first().text().toLowerCase();
    updateTimeLine(null, statuses, order);

    $(".order-time button").click(function (event) {
        var statuses = $('.statuses button.active').toArray() // get only selected (with "active" class)
            .map(elem => $(elem).text().toLowerCase()); // get the text from the buttton

        $('.order-time button.active').removeClass('active');
        $(event.target).addClass('active');

        var order = $('.order-time button.active').first().text().toLowerCase();

        updateTimeLine(null, statuses, order);
    });

    $(".statuses button").click(function (event) {
        var clickedButton = $(event.target);

        clickedButton.toggleClass('active');

        var statuses = $('.statuses button.active').toArray().map(elem => $(elem).text().toLowerCase());

        if (statuses.length === 0) {
            clickedButton.toggleClass('active');
        }

        var order = $('.order-time button.active').first().text().toLowerCase();

        updateTimeLine(null, statuses, order);
    });
</script>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Machine.IP)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Reason.ReasonName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.User.FullName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CreationDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Status)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.SrartTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.EndTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ScheduleTime)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Machine.IP)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Reason.ReasonName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.User.FullName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CreationDate)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Status)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.SrartTime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.EndTime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ScheduleTime)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.Id }) |
            @Html.ActionLink("Details", "Details", new { id=item.Id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Id })
        </td>
    </tr>
}

</table>


